{"version":3,"sources":["components/utilities/FormatPrice.js","components/MenuItem.js","components/MenuList.js","components/Order.js","components/images/basil.jpeg","components/App.js","reportWebVitals.js","index.js"],"names":["dollars","Intl","NumberFormat","style","currency","FormatPrice","priceInCents","format","MenuItem","props","menuItemHTML","className","name","description","price","type","onClick","event","preventDefault","addToCart","MenuList","MenuListHTML","menuItems","map","menuItem","id","Order","orderHTML","order","index","useState","setName","phoneNumber","setPhoneNumber","total","forEach","subtotal","onSubmit","addOrder","value","onChange","target","placeholder","App","setMenuItems","setOrder","newOrder","a","phone_number","fetch","method","headers","body","JSON","stringify","ok","console","log","useEffect","response","json","data","getMenuItems","src","basilImage","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12c5c9c7.chunk.js","sourcesContent":["let dollars = Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  });\n  \n  function FormatPrice(priceInCents) {\n    return dollars.format(priceInCents / 100);\n  }\n  \n  export default FormatPrice;","import FormatPrice from \"./utilities/FormatPrice\";\n\nfunction MenuItem(props) { \n    const menuItemHTML = (\n        \n            <li className=\"menu-item\">\n                 <h3>{props.name}</h3>\n                 <p>{props.description}</p>\n                 <p>{FormatPrice(props.price)}</p>\n                 <button type=\"button\" name={props.name} onClick={handleChange}>Add Item</button> \n             </li>\n        \n    );\n    \n    function handleChange(event) {\n        event.preventDefault();\n        // console.log('you clicked it!');\n        props.addToCart(props.name, props.price);\n    }\n\n    return (\n        <ul className=\"menu-list\">\n            {menuItemHTML}\n        </ul>\n    )\n}\n\nexport default MenuItem\n\n\n\n//what does it mean to be a menuitem (name description price)","import MenuItem from './MenuItem'\n\nfunction MenuList(props) {\n    // console.log(props);\n    \n   const MenuListHTML = props.menuItems.map(menuItem => \n    <MenuItem key={menuItem.id} {...menuItem} addToCart={props.addToCart}/>)\n\n\n    return(\n        <section className=\"menu-section\">\n            {MenuListHTML}\n        </section>\n    );\n\n};\n\nexport default MenuList","import {useState} from 'react'\nimport FormatPrice from \"./utilities/FormatPrice\";\n\nfunction Order(props) {\n    \n    const orderHTML = props.order.map((order, index) => {\n        return (\n        <div key={index} className=\"added-item\"> \n            <p>{order.name} {FormatPrice(order.price)}</p>\n        </div>\n        );\n    });\n    \n\n    const[name, setName] = useState(\"\");\n    const[phoneNumber, setPhoneNumber] = useState(\"\");\n    // const[newOrder, setNewOrder] = useState(props.order)\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        props.addOrder(props.order, name, phoneNumber);\n        setName(\"\");\n        setPhoneNumber(\"\");\n    }\n\n    function handleNameChange(event) {\n        setName(event.target.value)\n    }\n\n    function handleNumberChange(event) {\n        setPhoneNumber(event.target.value)\n    }\n\n    function subtotal() {\n        let total = 0;\n        props.order.forEach((order) => {\n            total = total + order.price;\n        });\n        \n        return FormatPrice(total);\n    }\n\n    return (\n        <aside className=\"order-panel\">\n        \n        {orderHTML}\n        <p id=\"subtotal\"> Your order total: {subtotal()} </p>\n        \n        <p>Enter your name and phone number below. Please review your order carefully before you submit your order.</p>\n        <form onSubmit={handleSubmit}>\n            <input name=\"text\" type=\"text\" id=\"full-name\" value={name} onChange={handleNameChange} placeholder=\"Full Name\"></input>\n            <input name=\"text\" type=\"text\" id=\"phone-number\" value={phoneNumber} onChange={handleNumberChange} placeholder=\"Phone Number\"></input>\n            <button type=\"submit\" className=\"submit-order\">Submit Your Order</button>\n        </form>\n        </aside>\n        \n    )\n    \n};\n\nexport default Order","export default __webpack_public_path__ + \"static/media/basil.876bfa1a.jpeg\";","// import MenuItem from './MenuItem'\nimport {useEffect, useState} from 'react';\nimport \"./App.css\";\nimport MenuList from './MenuList'\n// import menuItems from './utilities/menu.js'\nimport Order from './Order'\nimport basilImage from './images/basil.jpeg';\n\n\n\n//order endpoint that I set up using django/heroku\n\n\nfunction App() {  \n  const [menuItems, setMenuItems] = useState([]);\n  const [order, setOrder] = useState([]);\n  // const [selection, setSelection] = useState('Appetizer')\n  \n  \n  function addToCart(name, price) {\n    const newOrder = {name, price};\n    setOrder([...order, newOrder])\n  }\n\n  useEffect(() => {\n    \n    async function getMenuItems(){\n      const response = await fetch('https://django-restaurantapi-slcushing.herokuapp.com/api_v1/menuitems/');\n      const data = await response.json();\n      setMenuItems(data);\n    };\n\n    getMenuItems();\n\n  }, []);\n\n  async function addOrder(order, name, phoneNumber) {\n    const newOrder = {order, name, phone_number: phoneNumber};\n    const response = await fetch('https://django-restaurantapi-slcushing.herokuapp.com/api_v1/orders/', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n    }, \n      body: JSON.stringify(newOrder),\n  });\n\n    if (response.ok) {\n  //     const data = await response.json();\n      console.log(\"Thanks for your order\")\n    }\n  }\n\n  // const [selection, setSelection] = useState('appetizer')\n  \n  \n  // if (selection === 'appetizer') {\n  //   menuItems.catgory = \"Appetizer\"\n  // } else if (selection === 'entrees') {\n  //   menuItems.category = \"Entree\"\n  // } else if (selection === 'desserts') {\n  //   menuItems.category = \"Dessert\"\n  // } else if (selection === 'drinks') {\n  //   menuItems.category = \"Drink\"\n  // };\n\n\n\n\n  return (\n  \n    <div className=\"App\">\n      <header className=\"header\">\n        <nav>\n          <ul className=\"nav-bar\">\n            <li>Home</li>\n            <li>About Us </li>\n            <li>Contact Us</li>\n          </ul>\n        </nav>\n        <h1>Nonna's Kitchen</h1>\n      </header>\n      <nav className=\"category-bar\">\n        <button type=\"submit\" className=\"appetizer\">Appetizers</button>\n        <button type=\"submit\" className=\"entrees\">Entrees</button>\n        <button type=\"sumbit\" className=\"desserts\">Desserts</button>\n        <button type=\"submit\" className=\"drinks\">Drinks</button>\n      </nav>\n     <div className=\"container\">\n     <MenuList menuItems={menuItems} order={order} setOrder={setOrder} addToCart={addToCart}/>\n     <Order  order={order} setOrder={setOrder} addToCart={addToCart} addOrder={addOrder}/>\n     </div>\n     <div className=\"pic-ribbon\">\n        <img src={basilImage} alt=\"\" />\n     </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}